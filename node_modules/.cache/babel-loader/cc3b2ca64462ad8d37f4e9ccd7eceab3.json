{"ast":null,"code":"var _jsxFileName = \"/home/nividata-krupa/workspace/ReactJS/my-first-app/src/MyCalendar.js\";\n// import React, { Component } from 'react'\n// import { Calendar, momentLocalizer } from 'react-big-calendar'\n// import moment from 'moment'\n// import 'react-big-calendar/lib/css/react-big-calendar.css';\n// const localizer = momentLocalizer(moment)\n// export class MyCalendar extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//         eventObj: {}\n//     };\n// }\n//   state = {}\n//   handleSelect = (e) => {\n//     console.log(e)\n//     const title = window.prompt('New Event name')\n//     if (title) {\n//       console.log(title)\n//       // const eventData = {\n//       //   'title': title,\n//       //   'allDay': true,\n//       //   'start': '',\n//       //   'end': ''\n//       // }\n//       // this.setState({\n//       //   eventObj: eventData\n//       // })\n//     }\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <Calendar\n//           selectable\n//           localizer={localizer}\n//           events={[\n//             {\n//               'title': 'Long Event',\n//               'start': new Date(2020, 4, 7),\n//               'end': new Date(2020, 4, 10)\n//             }\n//           ]}\n//           startAccessor=\"start\"\n//           endAccessor=\"end\"\n//           style={{ height: 500 }}\n//           onSelectSlot={this.handleSelect}\n//         />\n//       </div>\n//     )\n//   }\n// }\n// export default MyCalendar;\n// import React from 'react'\n// import { Calendar, momentLocalizer } from 'react-big-calendar'\n// import moment from 'moment'\n// import 'react-big-calendar/lib/css/react-big-calendar.css'\n// const localizer = momentLocalizer(moment)\n// const myEventsList=[\n//     {\n//       title:'Event 1',\n//       start:'new Date(2020, 04 , 22)',\n//       end:'new Date(2020, 04 , 23)',\n//     },\n//     {\n//       title:'Event 2',\n//       start:'new Date(2020, 04, 23)',\n//       end:'new Date(2020, 04 ,24)',\n//     }\n//   ]\n// const MyCalendar = props => (\n//   <div>\n//     <Calendar\n//       localizer={localizer}\n//       events={myEventsList}\n//       startAccessor=\"start\"\n//       endAccessor=\"end\"\n//       style={{ height: 500 }}\n//     />\n//   </div>\n// )\nimport React, { Component } from 'react';\nimport { Calendar, Views, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport events from './events';\nimport * as dates from '../node_modules/react-big-calendar/lib/utils/dates';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input } from 'reactstrap';\nlet allViews = Object.keys(Views).map(k => Views[k]);\nconst localizer = momentLocalizer(moment);\n\nconst ColoredDateCellWrapper = ({\n  children\n}) => React.cloneElement(React.Children.only(children), {\n  style: {\n    backgroundColor: 'lightblue'\n  }\n}); // let MyCalendar = () => {\n//   // const [modal] = useState(true);\n//   const [event, setevent] = useState(events)\n//   const [modal, setModal] = useState(false);\n//   const toggle = () => setModal(!modal);\n//   const [input, setInput]=useState({eventName:'', eventStart:'', eventEnd:''})\n//   // const eventModal = () => {\n//   //   debugger\n//   //   return (alert('hello'))\n//   // }\n//   const handleChange=(e)=>{\n//     setInput({[e.target.name]:e.target.value})\n//     console.log(e.target.value)\n//   }\n//   const handleSelect = ({ start, end }) => {\n//     toggle()\n//     // const title = window.prompt('New Event Name')\n//   }\n//   const createEvent=({ start, end })=>{\n//     debugger\n//    const title = input.eventName\n//     console.log(title)\n//     if (title!=' ' && title!=null)\n//       setevent([\n//           ...event,\n//           {\n//             start: input.eventStart,\n//             end: input.eventEnd,\n//             title:input.eventName\n//           },\n//         ],\n//       )\n//       toggle()\n//   }\n//   return (\n//     <div>\n//       <Calendar\n//         events={event}\n//         views={allViews}\n//         step={60}\n//         showMultiDayTimes\n//         max={dates.add(dates.endOf(new Date(2020, 3, 1), 'day'), -1, 'hours')}\n//         defaultDate={new Date(2020, 3, 1)}\n//         components={{\n//           timeSlotWrapper: ColoredDateCellWrapper,\n//         }}\n//         localizer={localizer}\n//         style={{ height: 500 }}\n//         selectable\n//         onSelectEvent={event => alert(event.title)}\n//         onSelectSlot={handleSelect}\n//       />\n//       <Modal isOpen={modal} toggle={toggle} className=\"a\">\n//         <ModalHeader toggle={toggle}>Modal title</ModalHeader>\n//         <ModalBody>\n//           <Form>\n//             <FormGroup>\n//               <Label for=\"eventName\">Name</Label>\n//               <Input type=\"text\" name=\"eventName\" id=\"eventName\" value={input.eventName} onChange={handleChange}/>\n//             </FormGroup>\n//             <FormGroup>\n//               <Label for=\"eventStart\">Start</Label>\n//               <Input type=\"date\" name=\"eventStart\" id=\"eventStart\" value={input.eventStart} onchchange={handleChange}/>\n//             </FormGroup>\n//             <FormGroup>\n//               <Label for=\"eventEnd\">End</Label>\n//               <Input type=\"date\" name=\"eventEnd\" id=\"eventEnd\" />\n//             </FormGroup>\n//           </Form>\n//         </ModalBody>\n//         <ModalFooter>\n//           <Button color=\"primary\" onClick={createEvent}>Do Something</Button>{' '}\n//           <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n//         </ModalFooter>\n//       </Modal>\n//     </div>\n//   )\n// }\n\n\nexport default class MyCalendar extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      event: events,\n      modal: false,\n      eventName: '',\n      eventStart: '',\n      eventEnd: ''\n    };\n\n    this.toggle = () => this.setState({\n      modal: !this.state.modal\n    });\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n      console.log(e.target.value);\n    };\n\n    this.handleSelect = ({\n      start,\n      end\n    }) => {\n      this.toggle(); // const title = window.prompt('New Event Name')\n    };\n\n    this.createEvent = ({\n      start,\n      end\n    }) => {\n      debugger;\n      const title = this.state.eventName;\n      console.log(title);\n\n      if (title) {\n        this.setState({\n          events: [...this.state.event, {\n            start,\n            end,\n            title\n          }]\n        });\n      }\n\n      this.toggle();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Calendar, {\n      events: this.state.event,\n      views: allViews,\n      step: 60,\n      showMultiDayTimes: true,\n      max: dates.add(dates.endOf(new Date(2020, 3, 1), 'day'), -1, 'hours'),\n      defaultDate: new Date(2020, 3, 1),\n      components: {\n        timeSlotWrapper: ColoredDateCellWrapper\n      },\n      localizer: localizer,\n      style: {\n        height: 500\n      },\n      selectable: true,\n      onSelectEvent: event => alert(event.title),\n      onSelectSlot: this.handleSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      className: \"a\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }\n    }, \"Modal title\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"eventName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"eventName\",\n      id: \"eventName\",\n      value: this.state.eventName,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"eventStart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }\n    }, \"Start\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"date\",\n      name: \"eventStart\",\n      id: \"eventStart\",\n      value: this.state.eventStart,\n      onchchange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"eventEnd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }\n    }, \"End\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"date\",\n      name: \"eventEnd\",\n      id: \"eventEnd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.createEvent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 13\n      }\n    }, \"Do Something\"), ' ', /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 13\n      }\n    }, \"Cancel\"))));\n  }\n\n}","map":{"version":3,"sources":["/home/nividata-krupa/workspace/ReactJS/my-first-app/src/MyCalendar.js"],"names":["React","Component","Calendar","Views","momentLocalizer","moment","events","dates","Button","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","Label","Input","allViews","Object","keys","map","k","localizer","ColoredDateCellWrapper","children","cloneElement","Children","only","style","backgroundColor","MyCalendar","state","event","modal","eventName","eventStart","eventEnd","toggle","setState","handleChange","e","target","name","value","console","log","handleSelect","start","end","createEvent","title","render","add","endOf","Date","timeSlotWrapper","height","alert"],"mappings":"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","sourcesContent":["// import React, { Component } from 'react'\n// import { Calendar, momentLocalizer } from 'react-big-calendar'\n// import moment from 'moment'\n// import 'react-big-calendar/lib/css/react-big-calendar.css';\n\n// const localizer = momentLocalizer(moment)\n\n// export class MyCalendar extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//         eventObj: {}\n//     };\n// }\n\n//   state = {}\n//   handleSelect = (e) => {\n//     console.log(e)\n//     const title = window.prompt('New Event name')\n//     if (title) {\n//       console.log(title)\n//       // const eventData = {\n//       //   'title': title,\n//       //   'allDay': true,\n//       //   'start': '',\n//       //   'end': ''\n//       // }\n//       // this.setState({\n//       //   eventObj: eventData\n//       // })\n//     }\n\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <Calendar\n//           selectable\n//           localizer={localizer}\n//           events={[\n//             {\n//               'title': 'Long Event',\n//               'start': new Date(2020, 4, 7),\n//               'end': new Date(2020, 4, 10)\n//             }\n//           ]}\n//           startAccessor=\"start\"\n//           endAccessor=\"end\"\n//           style={{ height: 500 }}\n//           onSelectSlot={this.handleSelect}\n//         />\n//       </div>\n//     )\n//   }\n// }\n\n\n// export default MyCalendar;\n\n// import React from 'react'\n// import { Calendar, momentLocalizer } from 'react-big-calendar'\n// import moment from 'moment'\n// import 'react-big-calendar/lib/css/react-big-calendar.css'\n\n// const localizer = momentLocalizer(moment)\n// const myEventsList=[\n//     {\n//       title:'Event 1',\n//       start:'new Date(2020, 04 , 22)',\n//       end:'new Date(2020, 04 , 23)',\n//     },\n//     {\n//       title:'Event 2',\n//       start:'new Date(2020, 04, 23)',\n//       end:'new Date(2020, 04 ,24)',\n//     }\n//   ]\n\n// const MyCalendar = props => (\n//   <div>\n//     <Calendar\n//       localizer={localizer}\n//       events={myEventsList}\n//       startAccessor=\"start\"\n//       endAccessor=\"end\"\n//       style={{ height: 500 }}\n//     />\n//   </div>\n// )\n\n\nimport React, { Component } from 'react'\nimport { Calendar, Views, momentLocalizer } from 'react-big-calendar'\nimport moment from 'moment'\nimport events from './events'\nimport * as dates from '../node_modules/react-big-calendar/lib/utils/dates'\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input } from 'reactstrap';\n\nlet allViews = Object.keys(Views).map(k => Views[k])\n\nconst localizer = momentLocalizer(moment)\n\nconst ColoredDateCellWrapper = ({ children }) =>\n  React.cloneElement(React.Children.only(children), {\n    style: {\n      backgroundColor: 'lightblue',\n    },\n  })\n\n\n// let MyCalendar = () => {\n//   // const [modal] = useState(true);\n//   const [event, setevent] = useState(events)\n//   const [modal, setModal] = useState(false);\n//   const toggle = () => setModal(!modal);\n//   const [input, setInput]=useState({eventName:'', eventStart:'', eventEnd:''})\n\n//   // const eventModal = () => {\n\n//   //   debugger\n//   //   return (alert('hello'))\n//   // }\n//   const handleChange=(e)=>{\n//     setInput({[e.target.name]:e.target.value})\n//     console.log(e.target.value)\n\n//   }\n//   const handleSelect = ({ start, end }) => {\n//     toggle()\n//     // const title = window.prompt('New Event Name')\n\n//   }\n//   const createEvent=({ start, end })=>{\n//     debugger\n//    const title = input.eventName\n//     console.log(title)\n//     if (title!=' ' && title!=null)\n//       setevent([\n//           ...event,\n//           {\n//             start: input.eventStart,\n//             end: input.eventEnd,\n//             title:input.eventName\n//           },\n//         ],\n//       )\n//       toggle()\n//   }\n//   return (\n//     <div>\n//       <Calendar\n//         events={event}\n//         views={allViews}\n//         step={60}\n//         showMultiDayTimes\n//         max={dates.add(dates.endOf(new Date(2020, 3, 1), 'day'), -1, 'hours')}\n//         defaultDate={new Date(2020, 3, 1)}\n//         components={{\n//           timeSlotWrapper: ColoredDateCellWrapper,\n//         }}\n//         localizer={localizer}\n//         style={{ height: 500 }}\n\n//         selectable\n//         onSelectEvent={event => alert(event.title)}\n//         onSelectSlot={handleSelect}\n//       />\n//       <Modal isOpen={modal} toggle={toggle} className=\"a\">\n//         <ModalHeader toggle={toggle}>Modal title</ModalHeader>\n//         <ModalBody>\n//           <Form>\n//             <FormGroup>\n//               <Label for=\"eventName\">Name</Label>\n//               <Input type=\"text\" name=\"eventName\" id=\"eventName\" value={input.eventName} onChange={handleChange}/>\n//             </FormGroup>\n//             <FormGroup>\n//               <Label for=\"eventStart\">Start</Label>\n//               <Input type=\"date\" name=\"eventStart\" id=\"eventStart\" value={input.eventStart} onchchange={handleChange}/>\n//             </FormGroup>\n//             <FormGroup>\n//               <Label for=\"eventEnd\">End</Label>\n//               <Input type=\"date\" name=\"eventEnd\" id=\"eventEnd\" />\n//             </FormGroup>\n//           </Form>\n//         </ModalBody>\n//         <ModalFooter>\n//           <Button color=\"primary\" onClick={createEvent}>Do Something</Button>{' '}\n//           <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n//         </ModalFooter>\n//       </Modal>\n//     </div>\n//   )\n// }\n\nexport default class MyCalendar extends Component {\n  state = {\n    event: events,\n    modal: false,\n    eventName: '',\n    eventStart: '',\n    eventEnd: ''\n  }\n  toggle = () => this.setState({modal:(!this.state.modal)});\n\n  handleChange = (e) => {\n    this.setState({[e.target.name]: e.target.value })\n    console.log(e.target.value)\n\n  }\n  handleSelect = ({ start, end }) => {\n    this.toggle()\n    // const title = window.prompt('New Event Name')\n  }\n  createEvent = ({ start, end }) => {\n    debugger\n    const title = this.state.eventName\n    console.log(title)\n    if (title){\n    this.setState({\n      events: [\n        ...this.state.event,\n        {\n          start,\n          end,\n          title,\n        },\n      ],\n    })\n  }\n    this.toggle()\n  }\n  render() {\n    return (\n      <div>\n        <Calendar\n          events={this.state.event}\n          views={allViews}\n          step={60}\n          showMultiDayTimes\n          max={dates.add(dates.endOf(new Date(2020, 3, 1), 'day'), -1, 'hours')}\n          defaultDate={new Date(2020, 3, 1)}\n          components={{\n            timeSlotWrapper: ColoredDateCellWrapper,\n          }}\n          localizer={localizer}\n          style={{ height: 500 }}\n\n          selectable\n          onSelectEvent={event => alert(event.title)}\n          onSelectSlot={this.handleSelect}\n        />\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className=\"a\">\n          <ModalHeader toggle={this.toggle}>Modal title</ModalHeader>\n          <ModalBody>\n            <Form>\n              <FormGroup>\n                <Label for=\"eventName\">Name</Label>\n                <Input type=\"text\" name=\"eventName\" id=\"eventName\" value={this.state.eventName} onChange={this.handleChange} />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"eventStart\">Start</Label>\n                <Input type=\"date\" name=\"eventStart\" id=\"eventStart\" value={this.state.eventStart} onchchange={this.handleChange} />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"eventEnd\">End</Label>\n                <Input type=\"date\" name=\"eventEnd\" id=\"eventEnd\" />\n              </FormGroup>\n            </Form>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={this.createEvent}>Do Something</Button>{' '}\n            <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}